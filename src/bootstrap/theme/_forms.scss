//
// Forms
// --------------------------------------------------
input[type=text] {
    /* Remove First */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

.form-control {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border-style: solid;
    font-weight: 300;
    font-size: $font-size-small;
    padding: $input-padding;

    @include transition(all 0.3s);

    @include box-shadow(none);

    @media (min-width: $screen-md-min) {
        height: $input-height-large;
        font-size: $font-size-base;
        padding: $input-padding-large;
    }

    &:active,
    &:focus {
        @include box-shadow(0 0 4px 0 rgba(0, 168, 255, 0.19));
    }

    &.input-sm {
        height: 35px;
        font-size: $font-size-small;
        padding: 10px $padding-base-horizontal;
        @media (min-width: $screen-md-min) {
            height: 45px;
            font-size: $font-size-base;
        }
    }
}

.has-error {
    .input-group.no-border {
        .input-group-addon {
            border-color: $state-danger-text;
        }

        .form-control:focus + .input-group-addon {
            border-color: $state-danger-text;
        }
    }

    .error {
        color: $state-danger-text;
    }
}

label {
    font-size: $font-size-small;
    font-weight: 500;
    @media (min-width: $screen-md-min) {
        font-size: $font-size-base;
    }
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio,
.checkbox {
    position: relative;
    display: block;
    margin-top: 10px;
    margin-bottom: 10px;

    label {
        min-height: $line-height-computed;

        // Ensure the input doesn't jump when there is no text
        padding-left: 25px;
        margin-bottom: 0;
        font-weight: normal;
        cursor: pointer;
        position: relative;

        @include user-select(none);

        &:before {
            @extend .icon;

            @include icon-size(16, 16);

            @include icon-url(checkbox-unchecked);

            @include transition(all 0.3s);

            content: '';
            left: 0;
            top: 2px;
            position: absolute;
            background-position: center;
            margin-right: 5px;
            border-radius: $input-border-radius;
            border: 0;
        }
    }
}

.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
    &:checked + label:before {
        @include icon-url(checkbox-checked);
    }
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
    display: none;
}

.radio + .radio,
.checkbox + .checkbox {
    margin-top: -5px;

    // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
    position: relative;
    display: inline-block;
    padding-left: 20px;
    margin-bottom: 0;
    vertical-align: middle;
    font-weight: normal;
    cursor: pointer;
}

.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
    margin-top: 0;
    margin-left: 10px;

    // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
    &[disabled],
    &.disabled,
    fieldset[disabled] & {
        cursor: $cursor-disabled;
    }
}

// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
    &.disabled,
    fieldset[disabled] & {
        cursor: $cursor-disabled;
    }
}

// These classes are used on elements with <label> descendants
.radio,
.checkbox {
    &.disabled,
    fieldset[disabled] & {
        label {
            cursor: $cursor-disabled;
        }
    }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
// .form-group + .form-group {
//     margin-top: $form-group-margin-bottom * 2;
// }
.form-group.no-margin {
    margin: 0;
}
// form {
//     .btn {
//         margin-top: 20px;
//         margin-bottom: 0px;
//     }
// }
.form-description{
    display: inline-block;
    margin-top: 3px;
}
.form-submit{
    margin-top: $form-submit-margin-top;
    margin-bottom: 0;
}
small.error {
    color: $brand-danger;
}
.checkbox-switch{
    margin-top: 5px;
    margin-bottom: 5px;
    label {
        margin-bottom: 0 !important;
    }

    input.ios-switch {
        max-height: 0;
        max-width: 0;
        opacity: 0;
        display: none;
    }
    input.ios-switch + label {
        cursor: pointer;
        display: block;
        position: relative;
        // box-shadow: inset 0 0 0px 1px #d5d5d5;
        text-indent: -5000px;
        height: 18px;
        width: 40px;
        border-radius: 9px;
        background-color: $border-gray;
    }

    input.ios-switch + label:before {
        content: "";
        position: absolute;
        display: block;
        height: 18px;
        width: 40px;
        top: 0;
        left: 0;
        border-radius: 9px;
        background-image: linear-gradient(to left, #00d4ff, #00a9ff);
        @include transition(all 0.3s);
        opacity: 0;
    }

    input.ios-switch + label:after {
        content: "";
        position: absolute;
        display: block;
        height: 24px;
        width: 24px;
        top: -3px;
        left: 0;
        border-radius: 12px;
        border: solid 0.5px $border-gray;
        background: $color-white;
        box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.15), 0 1px 1px 0 rgba(0, 0, 0, 0.15);
        @include transition(all 0.2s)
    }
    input.ios-switch:checked + label:before {
        opacity: 1;
    }

    input.ios-switch:checked + label:after {
        left: 17px;
    }
}